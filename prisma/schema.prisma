// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @default(USER)
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  reviews       Review[]
}

// NextAuth related models
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Product related models
model Product {
  id              String    @id @default(cuid())
  name            String
  description     String
  price           Decimal   @db.Decimal(10, 2)
  images          String[]
  inventory       Int       @default(0)
  isFeatured      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  category        Category  @relation(fields: [categoryId], references: [id])
  categoryId      String
  orderItems      OrderItem[]
  reviews         Review[]
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  products    Product[]
}

model Order {
  id              String    @id @default(cuid())
  userId          String?
  status          String    @default("PROCESSING") // PROCESSING, SHIPPED, DELIVERED, CANCELLED
  total           Decimal   @db.Decimal(10, 2)
  paymentIntentId String?
  shippingAddress Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  orderItems      OrderItem[]
}

model OrderItem {
  id        String    @id @default(cuid())
  quantity  Int
  price     Decimal   @db.Decimal(10, 2)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product   @relation(fields: [productId], references: [id], onDelete: Restrict)
  productId String
}

model Review {
  id          String   @id @default(cuid())
  rating      Int
  comment     String?  @db.Text
  userId      String
  productId   String
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Enums
enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}
 